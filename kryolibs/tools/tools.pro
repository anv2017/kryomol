# File generated by kdevelop's qmake manager. 
# ------------------------------------------- 
# Subdir relative project main directory: ./mathtools
# Target is a library:

configfile = ../config/qryomol.pri
include($${configfile} )

TEMPLATE = lib
CONFIG +=   warn_on static $$(KRYOMOLMATHLIB)

DEFINES += BUILDTOOLSDLL

!static {
DEFINES += BUILDTOOLSDLL
}

TARGET = qryomoltools


HEADERS +=  mathtools.h toolsexport.h \
            stringtools.h exception.h \
            qdoubleeditbox.h fidarray.h \
            cursors.h utilities.h \  #tokenizer.h
            physicalconstants.h \
            sse_mathfun.h \
            orbitalarray.h \
    qdoubleslider.h

lapack {
 HEADERS += qryomollapack.h
}

lapack {
 HEADERS += qryomollapack.h
}

SOURCES += mathtools.cpp qdoubleeditbox.cpp fidarray.cpp \
           physicalconstants.cpp \
           orbitalarray.cpp \
           qdoubleslider.cpp


INCLUDEPATH += ../src ../wavelets

cuda {
INCLUDEPATH += ../cudatools
}

headers.files = $$HEADERS arrays_defines.h
!macx {
headers.path = "$$(KRYOMOL_DIR)/include/kryomol"
target.path = $$(KRYOMOL_DIR)/lib
} else {
QMAKE_LFLAGS_SONAME  = -Wl,-install_name,@executable_path/../lib/
headers.path = "$$(KRYOMOL_DIR)/$${APPNAME}.app/Contents/Headers/kryomol"
target.path = "$$(KRYOMOL_DIR)/$${APPNAME}.app/Contents/lib"
}
#INSTALLS += headers target

win32 {
DLLDESTDIR = "$$(KRYOMOL_DIR)/bin"
}

unix {
    macx { 
    LIBS += -framework accelerate 
    }
    mkl  {
    #LIBS += -lmkl_lapack -lmkl_ia32
    }
    lapack {
    #LIBS += -llapack -lblas
    } 
}
unix {
    macx { 
      veclib {
      system ( cp arrays_defines_veclib.h arrays_defines.h )
      }
    } else {
      mkl {
      message( "mkl headers" )
      system ( cp arrays_defines_mkl.h arrays_defines.h )
      } else {
      message( "lapack" )
      system ( cp arrays_defines_lapack.h arrays_defines.h )
      }
      }
}

win32 {

    mkl {
     system ( copy arrays_defines_mkl.h arrays_defines.h )
    } else {
    message( "lapack" )
    system ( copy arrays_defines_lapack.h arrays_defines.h )
    }

}
